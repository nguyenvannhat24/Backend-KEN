const userService = require('../services/user.service');
const jwt = require('jsonwebtoken');
const userRole = require('../services/userRole.service');
const role = require('../services/role.service');
const tokenBlacklist = require('../middlewares/tokenBlacklist');
require('dotenv').config(); // ƒë·ªçc file .env
/**
 * Auth Controller - X·ª≠ l√Ω c√°c request li√™n quan ƒë·∫øn authentication
 */
class AuthController {

  /**
   * ƒêƒÉng nh·∫≠p user
   * POST /api/login
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  async login(req, res) {
    try {
      // Validate JWT secrets
      const jwtSecret = process.env.JWT_SECRET;
      const jwtRefreshSecret = process.env.JWT_REFRESH_SECRET;
      if (!jwtSecret || !jwtRefreshSecret) {
        console.error('‚ùå JWT secrets missing. Please set JWT_SECRET and JWT_REFRESH_SECRET in .env');
        return res.status(500).json({
          success: false,
          error: 'Server misconfigured',
          message: 'JWT secrets are missing. Please configure JWT_SECRET and JWT_REFRESH_SECRET.'
        });
      }
      // Ki·ªÉm tra req.body
      if (!req.body) {
        return res.status(400).json({
          success: false,
          error: 'Request body kh√¥ng h·ª£p l·ªá',
          message: 'Vui l√≤ng g·ª≠i d·ªØ li·ªáu JSON h·ª£p l·ªá'
        });
      }

      const { email, password } = req.body;

      // Validate input
      if (!email || !password) {
        return res.status(400).json({ 
          success: false,
          error: 'Email v√† password l√† b·∫Øt bu·ªôc',
          message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng nh·∫≠p'
        });
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({ 
          success: false,
          error: 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
          message: 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá'
        });
      }

      // Validate user credentials
      const user = await userService.validateUser(email, password);
      if (!user) {
        return res.status(401).json({ 
          success: false,
          error: 'T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
          message: 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p'
        });
      }

      // L·∫•y role c·ªßa user
      const roleName = await role.viewRole(user._id);
      console.log('üîë User role:', roleName);
      
      // T·∫°o JWT token
      const token = jwt.sign(
        { 
          userId: user._id, 
          email: user.email,
          role: roleName 
        },
        jwtSecret,
        { expiresIn: '24h' } // TƒÉng th·ªùi gian token l√™n 24h
      );

      const refreshToken = jwt.sign(
        { 
          userId: user._id, 
          email: user.email,
          role: roleName 
        },
     jwtRefreshSecret ,
  { expiresIn: '7d' } // refresh token s·ªëng l√¢u h∆°n
);

      // Response th√†nh c√¥ng
      res.json({
        success: true,
        message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
        data: {
          token,
          refreshToken, 
          user: {
            id: user._id,
            email: user.email,
            username: user.username,
            full_name: user.full_name,
            avatar_url: user.avatar_url,
            status: user.status,
            role: roleName
          }
        }
      });

    } catch (error) {
      console.error('‚ùå Login error:', error);
      res.status(500).json({ 
        success: false,
        error: 'L·ªói server', 
        message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau.',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  /**
   * ƒêƒÉng xu·∫•t user (invalidate token)
   * POST /api/logout
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */

      
async logout(req, res) {
  try {
    // L·∫•y token t·ª´ header Authorization
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng cung c·∫•p"
      });
    }

    const token = authHeader.split(' ')[1];

    // L∆∞u token v√†o blacklist
    tokenBlacklist.add(token);

    res.json({
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('‚ùå Logout error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói server',
      message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng xu·∫•t'
    });
  }
}




 // Trong class AuthController
 // gi·∫£i m√£
async verifyKeycloakToken(req, res) {
  const { token } = req.body;

  if (!token) {
    return res.status(400).json({ success: false, message: "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
  }

  try {
    // N·∫øu mu·ªën verify th·ª±c s·ª±, c·∫ßn l·∫•y public key c·ªßa Keycloak
    // ·ªû ƒë√¢y t·∫°m decode
    const decoded = jwt.decode(token, { complete: true });

    res.json({
      success: true,
      message: "Gi·∫£i m√£ token Keycloak th√†nh c√¥ng",
      data: decoded?.payload
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: "Token kh√¥ng h·ª£p l·ªá" });
  }
}
  /**
   * Refresh token
   * POST /api/refresh-token
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  async refreshToken(req, res) {
    try {
      const { refreshToken } = req.body;

      if (!refreshToken) {
        return res.status(400).json({
          success: false,
          error: 'refreshToken l√† b·∫Øt bu·ªôc',
          message: 'Vui l√≤ng cung c·∫•p refreshToken ƒë·ªÉ c·∫•p m·ªõi access token'
        });
      }

      // Verify refresh token b·∫±ng JWT_REFRESH_SECRET
      const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);

      // T·∫°o access token m·ªõi
      const newAccessToken = jwt.sign(
        {
          userId: decoded.userId,
          email: decoded.email,
          role: decoded.role
        },
        process.env.JWT_SECRET,
        { expiresIn: '24h' }
      );

      res.json({
        success: true,
        message: 'C·∫•p m·ªõi access token th√†nh c√¥ng',
        data: {
          token: newAccessToken
        }
      });
    } catch (error) {
      console.error('‚ùå Refresh token error:', error);

      if (error.name === 'TokenExpiredError') {
        return res.status(401).json({
          success: false,
          error: 'Refresh token h·∫øt h·∫°n',
          message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
        });
      }
      if (error.name === 'JsonWebTokenError') {
        return res.status(401).json({
          success: false,
          error: 'Refresh token kh√¥ng h·ª£p l·ªá',
          message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
        });
      }

      res.status(500).json({
        success: false,
        error: 'L·ªói server',
        message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh refresh token'
      });
    }
  }
}
const authController = new AuthController();
// Export methods
module.exports = {
  login: authController.login.bind(authController),
  logout: authController.logout.bind(authController),
  refreshToken: authController.refreshToken.bind(authController),
  verifyKeycloakToken: authController.verifyKeycloakToken.bind(authController)
};


