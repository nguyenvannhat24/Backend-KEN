const userService = require('../services/user.service');
const jwt = require('jsonwebtoken');
const userRole = require('../services/userRole.service');
const role = require('../services/role.service');

/**
 * Auth Controller - X·ª≠ l√Ω c√°c request li√™n quan ƒë·∫øn authentication
 */
class AuthController {

  /**
   * ƒêƒÉng nh·∫≠p user
   * POST /api/login
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  async login(req, res) {
    try {
      // Ki·ªÉm tra req.body
      if (!req.body) {
        return res.status(400).json({
          success: false,
          error: 'Request body kh√¥ng h·ª£p l·ªá',
          message: 'Vui l√≤ng g·ª≠i d·ªØ li·ªáu JSON h·ª£p l·ªá'
        });
      }

      const { email, password } = req.body;

      // Validate input
      if (!email || !password) {
        return res.status(400).json({ 
          success: false,
          error: 'Email v√† password l√† b·∫Øt bu·ªôc',
          message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng nh·∫≠p'
        });
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({ 
          success: false,
          error: 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
          message: 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá'
        });
      }

      // Validate user credentials
      const user = await userService.validateUser(email, password);
      if (!user) {
        return res.status(401).json({ 
          success: false,
          error: 'T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
          message: 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p'
        });
      }

      // L·∫•y role c·ªßa user
      const roleName = await role.viewRole(user._id);
      console.log('üîë User role:', roleName);
      
      // T·∫°o JWT token
      const token = jwt.sign(
        { 
          userId: user._id, 
          email: user.email,
          role: roleName 
        },
        process.env.JWT_SECRET || 'your_jwt_secret_key',
        { expiresIn: '24h' } // TƒÉng th·ªùi gian token l√™n 24h
      );

      // Response th√†nh c√¥ng
      res.json({
        success: true,
        message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
        data: {
          token,
          user: {
            id: user._id,
            email: user.email,
            username: user.username,
            full_name: user.full_name,
            avatar_url: user.avatar_url,
            status: user.status,
            role: roleName
          }
        }
      });

    } catch (error) {
      console.error('‚ùå Login error:', error);
      res.status(500).json({ 
        success: false,
        error: 'L·ªói server', 
        message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau.',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  /**
   * ƒêƒÉng xu·∫•t user (invalidate token)
   * POST /api/logout
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  async logout(req, res) {
    try {
      // Trong th·ª±c t·∫ø, c√≥ th·ªÉ l∆∞u token v√†o blacklist
      // Ho·∫∑c s·ª≠ d·ª•ng Redis ƒë·ªÉ qu·∫£n l√Ω session
      
      res.json({
        success: true,
        message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
      });
    } catch (error) {
      console.error('‚ùå Logout error:', error);
      res.status(500).json({
        success: false,
        error: 'L·ªói server',
        message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng xu·∫•t'
      });
    }
  }

  /**
   * Refresh token
   * POST /api/refresh-token
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  async refreshToken(req, res) {
    try {
      const { token } = req.body;

      if (!token) {
        return res.status(400).json({
          success: false,
          error: 'Token l√† b·∫Øt bu·ªôc',
          message: 'Vui l√≤ng cung c·∫•p token ƒë·ªÉ refresh'
        });
      }

      // Verify token hi·ªán t·∫°i
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret_key');
      
      // T·∫°o token m·ªõi
      const newToken = jwt.sign(
        { 
          userId: decoded.userId,
          email: decoded.email,
          role: decoded.role
        },
        process.env.JWT_SECRET || 'your_jwt_secret_key',
        { expiresIn: '24h' }
      );

      res.json({
        success: true,
        message: 'Refresh token th√†nh c√¥ng',
        data: {
          token: newToken
        }
      });

    } catch (error) {
      console.error('‚ùå Refresh token error:', error);
      
      if (error.name === 'JsonWebTokenError') {
        return res.status(401).json({
          success: false,
          error: 'Token kh√¥ng h·ª£p l·ªá',
          message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
        });
      }

      res.status(500).json({
        success: false,
        error: 'L·ªói server',
        message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh refresh token'
      });
    }
  }
}

// Export methods
const authController = new AuthController();
module.exports = {
  login: authController.login.bind(authController),
  logout: authController.logout.bind(authController),
  refreshToken: authController.refreshToken.bind(authController)
};
