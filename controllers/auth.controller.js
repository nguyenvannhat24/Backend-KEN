const userService = require('../services/user.service');
const jwt = require('jsonwebtoken');
const userRole = require('../services/userRole.service');
const role = require('../services/role.service');
const tokenBlacklist = require('../middlewares/tokenBlacklist');
require('dotenv').config();

class AuthController {
  async login(req, res) { 
    try {
      const jwtSecret = process.env.JWT_SECRET;
      const jwtRefreshSecret = process.env.JWT_REFRESH_SECRET;
      if (!jwtSecret || !jwtRefreshSecret) {
        return res.status(500).json({
          success: false,
          error: 'Server misconfigured',
          message: 'JWT secrets are missing'
        });
      }

      const { login, password } = req.body;

      if (!login || !password) {
        return res.status(400).json({ 
          success: false,
          error: 'Login v√† password l√† b·∫Øt bu·ªôc',
          message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng nh·∫≠p'
        });
      }

      const user = await userService.validateUser(login, password);
      if (!user) {
        return res.status(401).json({ 
          success: false,
          error: 'T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
          message: 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p'
        });
      }

      if (!user.status || user.status.toLowerCase() !== "active") {
        return res.status(403).json({
          success: false,
          error: 'T√†i kho·∫£n b·ªã kh√≥a ho·∫∑c ch∆∞a k√≠ch ho·∫°t',
          message: 'Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£'
        });
      }

      const userRoles = await role.getUserRoles(user._id);

      const token = jwt.sign(
        { 
          userId: user._id, 
          email: user.email,
          username: user.username,
          roles: userRoles 
        },
        jwtSecret,
        { expiresIn: '24h' }
      );

      const refreshToken = jwt.sign(
        { 
          userId: user._id, 
          email: user.email,
          username: user.username,
          roles: userRoles 
        },
        jwtRefreshSecret,
        { expiresIn: '7d' }
      );

      res.json({
        success: true,
        message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
        data: {
          token,
          refreshToken, 
          user: {
            id: user._id,
            email: user.email,
            username: user.username,
            full_name: user.full_name,
            avatar_url: user.avatar_url,
            status: user.status,
            roles: userRoles
          }
        }
      });

    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({ 
        success: false,
        error: 'L·ªói server', 
        message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau.',
        details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
      });
    }
}

 async logout(req, res) {
  try {
    const authHeader = req.headers.authorization;
    const { refreshToken } = req.body; // üëà l·∫•y refreshToken t·ª´ body

    // Ki·ªÉm tra access token h·ª£p l·ªá
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng cung c·∫•p"
      });
    }

    // Thu h·ªìi access token
    const accessToken = authHeader.split(' ')[1];
    tokenBlacklist.add(accessToken);

    // N·∫øu c√≥ refresh token th√¨ thu h·ªìi lu√¥n
    if (refreshToken) {
      tokenBlacklist.add(refreshToken); 
    
    }

    res.json({
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng. Token ƒë√£ b·ªã thu h·ªìi.'
    });

  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói server',
      message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng xu·∫•t'
    });
  }
}


  async verifyKeycloakToken(req, res) {
    const { token } = req.body;

    if (!token) {
      return res.status(400).json({ 
        success: false, 
        message: "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" 
      });
    }

    try {
      const decoded = jwt.decode(token, { complete: true });

      res.json({
        success: true,
        message: "Gi·∫£i m√£ token Keycloak th√†nh c√¥ng",
        data: decoded?.payload
      });
    } catch (error) {
      console.error('Keycloak token decode error:', error);
      res.status(500).json({ 
        success: false, 
        message: "Token kh√¥ng h·ª£p l·ªá" 
      });
    }
  }
async refreshToken(req, res) {
  try {
    const { refreshToken } = req.body;

    if (!refreshToken) {
      return res.status(400).json({
        success: false,
        error: 'Thi·∫øu refreshToken',
        message: 'Vui l√≤ng g·ª≠i k√®m refreshToken'
      });
    }

    // ‚úÖ 1Ô∏è‚É£ Ki·ªÉm tra xem refresh token c√≥ trong blacklist kh√¥ng
    if (tokenBlacklist.has(refreshToken)) {
      return res.status(403).json({
        success: false,
        error: 'Refresh token ƒë√£ b·ªã thu h·ªìi',
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
      });
    }

    // ‚úÖ 2Ô∏è‚É£ X√°c minh refresh token h·ª£p l·ªá
    let decoded;
    try {
      decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);
    } catch (err) {
      if (err.name === 'TokenExpiredError') {
        return res.status(401).json({
          success: false,
          error: 'Refresh token h·∫øt h·∫°n',
          message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
        });
      }
      return res.status(401).json({
        success: false,
        error: 'Refresh token kh√¥ng h·ª£p l·ªá',
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
      });
    }

    // ‚úÖ 3Ô∏è‚É£ L·∫•y l·∫°i th√¥ng tin ng∆∞·ªùi d√πng
    const user = await userService.findById(decoded.userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    // ‚úÖ 4Ô∏è‚É£ L·∫•y l·∫°i danh s√°ch vai tr√≤
    const userRoles = await role.getUserRoles(user._id);

    // ‚úÖ 5Ô∏è‚É£ T·∫°o token m·ªõi
    const newAccessToken = jwt.sign(
      {
        userId: user._id,
        email: user.email,
        username: user.username,
        roles: userRoles
      },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    // üîÅ T√πy ch·ªçn: t·∫°o refresh token m·ªõi v√† thu h·ªìi c√°i c≈©
    const newRefreshToken = jwt.sign(
      {
        userId: user._id,
        email: user.email,
        username: user.username,
        roles: userRoles
      },
      process.env.JWT_REFRESH_SECRET,
      { expiresIn: '7d' }
    );

    // ‚úÖ 6Ô∏è‚É£ Thu h·ªìi refresh token c≈© (ƒë∆∞a v√†o blacklist)
    tokenBlacklist.add(refreshToken);

    return res.json({
      success: true,
      message: 'L√†m m·ªõi token th√†nh c√¥ng',
      data: {
        token: newAccessToken,
        refreshToken: newRefreshToken,
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          roles: userRoles
        }
      }
    });

  } catch (error) {
    console.error('Refresh token error:', error);
    return res.status(500).json({
      success: false,
      error: 'L·ªói server',
      message: 'C√≥ l·ªói x·∫£y ra khi l√†m m·ªõi token'
    });
  }
}


}

const authController = new AuthController();

module.exports = {
  login: authController.login.bind(authController),
  logout: authController.logout.bind(authController),
  refreshToken: authController.refreshToken.bind(authController),
  verifyKeycloakToken: authController.verifyKeycloakToken.bind(authController)
};


