const jwt = require('jsonwebtoken');
const jwksClient = require('jwks-rsa');
require('dotenv').config();
const tokenBlacklist = require('./tokenBlacklist');
const userService = require('../services/user.service');
const { getUserByUsername } = require('../services/keycloak.service');
const userRoleService = require('../services/userRole.service');
const roleService = require('../services/role.service');

// Keycloak JWKS client
const keycloakClient = jwksClient({
  jwksUri: process.env.KEYCLOAK_JWKS_URI
});

// L·∫•y public key t·ª´ Keycloak
function getKey(header, callback) {
  keycloakClient.getSigningKey(header.kid, (err, key) => {
    if (err) return callback(err);
    callback(null, key.getPublicKey());
  });
}

/**
 * Middleware x√°c th·ª±c c·∫£ Local JWT v√† Keycloak JWT
 */
const authenticateAny = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng cung c·∫•p' });
    }

    const token = authHeader.split(' ')[1];
    if (tokenBlacklist.has(token)) {
      return res.status(401).json({ success: false, message: 'Token ƒë√£ b·ªã ƒëƒÉng xu·∫•t' });
    }

    // Th·ª≠ verify Local JWT tr∆∞·ªõc
    jwt.verify(token, process.env.JWT_SECRET, (errLocal, decodedLocal) => {
      if (!errLocal && decodedLocal) {
        req.user = {
          id: decodedLocal.userId,
          email: decodedLocal.email,
          role: decodedLocal.role
        };
        console.log(`üîê [AUTH] Local JWT verified: ${decodedLocal.email} (${decodedLocal.role})`);
        return next();
      }

      // N·∫øu Local JWT fail, ti·∫øp t·ª•c v·ªõi Keycloak
      jwt.verify(token, getKey, { algorithms: ['RS256'] }, async (errKC, decodedKC) => {
        if (errKC) {
          return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n' });
        }

        const username = decodedKC.preferred_username;
        if (!username) {
          return res.status(400).json({ message: 'Keycloak token kh√¥ng c√≥ username' });
        }

        // Ki·ªÉm tra user ƒë√£ c√≥ trong DB ch∆∞a
        let user = await userService.getUserByUsername(username);
        if (!user) {
          // L·∫•y th√¥ng tin t·ª´ Keycloak
          const kcUsers = await getUserByUsername(username);
          const kcUser = kcUsers[0];
          if (!kcUser) return res.status(404).json({ message: 'User not found in Keycloak' });

          // T·∫°o user m·ªõi
          user = await userService.createUserSSO({
            username: kcUser.username,
            email: kcUser.email,
            full_name: `${kcUser.lastName} ${kcUser.firstName}`,
            idSSO: kcUser.id
          });

          // Th√™m quy·ªÅn m·∫∑c ƒë·ªãnh "user"
          const roleId = await roleService.getIdByName('user');
                if (roleId) {
            const existingUserRole = await userRoleService.findByUserAndRole(user._id, roleId);
            if (!existingUserRole) {
              await userRoleService.create({ user_id: user._id, role_id: roleId });
              console.log(`‚úÖ Assigned role "user" to ${user.email}`);
            } else {
              console.log(`‚ö†Ô∏è User ${user.email} ƒë√£ c√≥ role "user", b·ªè qua t·∫°o m·ªõi`);
            }
          }

        }
    

        // G√°n th√¥ng tin user v√†o req
      const dbRoles = await userRoleService.getRoles(user._id); 
req.user = {
  id: user._id,
  email: user.email,
  username: user.username,
  roles: dbRoles.map(r => r.role_id.name) // n·∫øu r.role_id l√† object Role
};

        console.log(`üîë [AUTH] Keycloak JWT verified & user loaded: ${user.email}`);
        next();
      });
    });
  } catch (err) {
    console.error('‚ùå [AUTH] Error in authenticateAny:', err);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * Middleware ki·ªÉm tra quy·ªÅn
 */
const authorizeAny = (...allowedRoles) => (req, res, next) => {
  if (!req.user) return res.status(401).json({ success: false, message: 'Ch∆∞a x√°c th·ª±c' });

  if (req.user.role && allowedRoles.includes(req.user.role)) return next();

  if (req.user.roles && req.user.roles.some(r => allowedRoles.includes(r))) return next();


  return res.status(403).json({ success: false, message: `B·∫°n c·∫ßn quy·ªÅn ${allowedRoles.join(', ')} ƒë·ªÉ truy c·∫≠p` });
};

/**
 * Middleware admin only
 */
const adminAny = authorizeAny('admin');

module.exports = {
  authenticateAny,
  authorizeAny,
  adminAny
};
