const jwt = require('jsonwebtoken');
const jwksClient = require('jwks-rsa');
require('dotenv').config(); // ƒë·ªçc file .env
const tokenBlacklist = require('./tokenBlacklist');
// Keycloak JWKS client
const keycloakClient = jwksClient({
  jwksUri: process.env.KEYCLOAK_JWKS_URI
});

// L·∫•y public key t·ª´ Keycloak
function getKey(header, callback) {
  keycloakClient.getSigningKey(header.kid, (err, key) => {
    if (err) return callback(err);
    const signingKey = key.getPublicKey();
    callback(null, signingKey);
  });
}

/**
 * Middleware x√°c th·ª±c c·∫£ Local JWT v√† Keycloak JWT
 */
const authenticateAny = (req, res, next) => {
  console.log('üîç [AUTH DEBUG] Headers:', req.headers.authorization);
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    console.log('‚ùå [AUTH] No valid authorization header');
    return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng cung c·∫•p' });
  }
  

  const token = authHeader.split(' ')[1];

  if (tokenBlacklist.has(token)) {
  return res.status(401).json({ message: "Token ƒë√£ b·ªã ƒëƒÉng xu·∫•t" });
}

  // Th·ª≠ verify Local JWT tr∆∞·ªõc
  jwt.verify(token, process.env.JWT_SECRET, (errLocal, decodedLocal) => {
    if (!errLocal && decodedLocal) {
      req.user = {
        id: decodedLocal.userId,
        email: decodedLocal.email,
        role: decodedLocal.role
      };
      console.log(`üîê [AUTH] Local JWT verified: ${decodedLocal.email} (${decodedLocal.role})`);
      return next();
    }

    // N·∫øu Local JWT fail, th·ª≠ Keycloak JWT
    jwt.verify(token, getKey, { algorithms: ['RS256'] }, (errKC, decodedKC) => {
      if (errKC) {
        return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n' });
      }

      // G√°n th√¥ng tin user t·ª´ Keycloak
      let roles = decodedKC.realm_access?.roles || [];

      // N·∫øu mu·ªën l·∫•y th√™m roles c·ªßa client
      if (decodedKC.resource_access) {
        Object.values(decodedKC.resource_access).forEach(clientRoles => {
          roles.push(...(clientRoles.roles || []));
        });
      }
      // role 

      req.user = {
        id: decodedKC.sub,
        email: decodedKC.email,
        username: decodedKC.preferred_username,
        roles: Array.from(new Set(roles)) // lo·∫°i tr√πng roles
      };
      
      console.log(`üîë [AUTH] Keycloak JWT verified: ${decodedKC.email} (${roles.join(', ')})`);

      next();
    });
  });
};

/**
 * Middleware ki·ªÉm tra quy·ªÅn (h·ªón h·ª£p Local + Keycloak)
 * @param  {...string} allowedRoles 
 */
const authorizeAny = (...allowedRoles) => {
  return (req, res, next) => {
    if (!req.user) return res.status(401).json({ success: false, message: 'Ch∆∞a x√°c th·ª±c' });

    // N·∫øu l√† Local JWT (c√≥ field role)
    if (req.user.role) {
      if (allowedRoles.includes(req.user.role)) return next();
      return res.status(403).json({ success: false, message: `B·∫°n c·∫ßn quy·ªÅn ${allowedRoles.join(', ')} ƒë·ªÉ truy c·∫≠p` });
    }

    // N·∫øu l√† Keycloak JWT (kh√¥ng c√≥ role field ri√™ng, ch·ªâ token h·ª£p l·ªá)
    // M·∫∑c ƒë·ªãnh coi l√† "user", kh√¥ng check role
    return next();
  };
};


/**
 * Middleware admin only
 */
const adminAny = authorizeAny('admin');

module.exports = {
  authenticateAny,
  authorizeAny,
  adminAny
};
