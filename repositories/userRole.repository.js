const UserRole = require("../models/userRole.model");
const Role = require("../models/role.model");

class UserRoleRepository {
    // T√¨m role theo user_id
    async findRoleByUser(userId) {
 const userRoles = await UserRole.find({ user_id: userId.toString() }).lean();
  if (!userRoles || userRoles.length === 0) return [];

  const roles = await Role.find({ _id: { $in: userRoles.map(ur => ur.role_id) } }).lean();
  return roles;
    }

    // L·∫•y t·∫•t c·∫£ UserRole
    async findAll() {
        return await UserRole.find().lean();
    }

    // L·∫•y t·∫•t c·∫£ role theo user_id (n·∫øu 1 user c√≥ nhi·ªÅu role)
    async findRolesByUser(userId) {
        return await UserRole.find({ user_id: userId.toString() })
            .populate("role_id") // tr·∫£ th√™m th√¥ng tin role
            .lean();
    }
    // l·∫•y t·∫•t c·∫£ user theo role id
    async findUserByIdRole(roleId){
      return await UserRole.find({ role_id: roleId.toString() })
           
            .lean();
    }

    // Th√™m m·ªõi user-role
    async create(userRoleData) {
        return await UserRole.create(userRoleData);
    }

    // C·∫≠p nh·∫≠t role c·ªßa user
    async update(userRoleId, updateData) {
        return await UserRole.findByIdAndUpdate(userRoleId, updateData, { new: true }).lean();
    }

    // X√≥a user-role theo id
    async delete(userRoleId) {
        return await UserRole.findByIdAndDelete(userRoleId).lean();
    }

    // X√≥a t·∫•t c·∫£ role c·ªßa 1 user
    async deleteByUser(userId) {
        return await UserRole.deleteMany({ user_id: userId.toString() });
    }

    async  findByUserAndRole(user_id, role_id){
        return await UserRole.findOne({ user_id, role_id });
    }

/**
 * ƒê·∫øm s·ªë ng∆∞·ªùi d√πng theo role
     * @param {string} roleName - t√™n role (v√≠ d·ª•: "admin", "user", ...)
 */


 async  countUsersByRole(roleId) {
  try {
    // 1Ô∏è‚É£ ƒê·∫øm s·ªë b·∫£n ghi trong b·∫£ng UserRole c√≥ role_id t∆∞∆°ng ·ª©ng
    const count = await UserRole.countDocuments({ role_id: roleId, status: 'active' });

    // 2Ô∏è‚É£ L·∫•y danh s√°ch user t∆∞∆°ng ·ª©ng (n·∫øu mu·ªën in ra)
    const users = await UserRole.find({ role_id: roleId, status: 'active' })
      .populate('user_id', 'username email');

    console.log(`‚úÖ Role ID "${roleId}" hi·ªán c√≥ ${count} ng∆∞·ªùi d√πng ƒëang active.`);
    console.log('üë• Danh s√°ch ng∆∞·ªùi d√πng:', users.map(u => u.user_id));

    return count;
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·∫øm ng∆∞·ªùi d√πng theo role_id:', error);
    return 0;
  }
}
async deleteManyByIds(ids) {
  return await UserRole.deleteMany({ _id: { $in: ids } });
}
 async findByUser(userId) {
    if (!userId) throw new Error('‚ùå userId b·ªã thi·∫øu');

    // Tr·∫£ v·ªÅ m·∫£ng c√°c document UserRole c·ªßa user
    const userRoles = await UserRole.find({ user_id: userId }).populate('role_id'); 
    // populate('role_id') n·∫øu b·∫°n mu·ªën l·∫•y th√¥ng tin role chi ti·∫øt

    return userRoles;
  }

/* T√¨m 1 user-role theo ID
   * @param {string} userRoleId - ID c·ªßa user-role
   * @returns {Promise<Object|null>} user-role ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
   */
  async findById(userRoleId) {
    if (!userRoleId) throw new Error('userRoleId b·ªã thi·∫øu');

    try {
      const userRole = await UserRole.findById(userRoleId).lean();
      return userRole; // tr·∫£ v·ªÅ object ho·∫∑c null
    } catch (error) {
      console.error('‚ùå Error in UserRoleRepository.findById:', error);
      throw error;
    }
  }
}

module.exports = new UserRoleRepository();
