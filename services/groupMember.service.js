const mongoose = require("mongoose");
const groupMemberRepo = require("../repositories/groupMember.repository");
const userRepo = require("../repositories/user.repository");
const groupRepo = require("../repositories/group.repository");
const UserRole = require("../models/userRole.model"); //
class GroupMemberService {
  async checkOwner(user_id, group_id) {
    if (!mongoose.Types.ObjectId.isValid(group_id)) {
      throw new Error("group_id kh√¥ng h·ª£p l·ªá");
    }
    if (!mongoose.Types.ObjectId.isValid(user_id)) {
      throw new Error("user_id kh√¥ng h·ª£p l·ªá");
    }

    const user = await userRepo.findById(user_id);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");

    // ‚úÖ N·∫øu l√† System_Manager ho·∫∑c Admin th√¨ lu√¥n c√≥ quy·ªÅn
    if (["system_manager", "admin"].includes(user.role?.toLowerCase())) {
      return true;
    }

    const member = await groupMemberRepo.findMember(user_id, group_id);
    if (!member || member.role_in_group.toLowerCase().trim() !== "ng∆∞·ªùi t·∫°o") {
      throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y");
    }
  }

  async addMember({ requester_id, user_id, group_id, role_in_group = "Ng∆∞·ªùi xem" }) {
    const requester = await userRepo.findById(requester_id);
    if (!requester) throw new Error("Ng∆∞·ªùi y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i");

    // ‚úÖ Cho ph√©p System Manager ho·∫∑c Admin b·ªè qua ki·ªÉm tra group
    if (!["system_manager", "admin"].includes(requester.role?.toLowerCase())) {

      const requesterMember = await groupMemberRepo.findMember(requester_id, group_id);
      if (!requesterMember) throw new Error("B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa group n√†y");

      const requesterRole = requesterMember.role_in_group.toLowerCase().trim();
      
      if (requesterRole !== "ng∆∞·ªùi t·∫°o" && requesterRole !== "qu·∫£n tr·ªã vi√™n") {
        throw new Error("Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ th√™m th√†nh vi√™n :",requesterRole );
      }
      
    }

    const user = await userRepo.findById(user_id);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");

    const group = await groupRepo.findById(group_id);
    if (!group) throw new Error("Group kh√¥ng t·ªìn t·∫°i");

    // Kh√¥ng c·∫ßn validation center_id theo y√™u c·∫ßu Backlog

    const existing = await groupMemberRepo.findMember(user_id, group_id);
    if (existing) throw new Error("User ƒë√£ l√† th√†nh vi√™n trong group n√†y");

    return await groupMemberRepo.addMember({ user_id, group_id, role_in_group });
  }

  async updateMember({ requester_id, user_id, group_id, updateData }) {
  const mongoose = require('mongoose');
  
  // üß© Ki·ªÉm tra ID h·ª£p l·ªá
  if (!mongoose.Types.ObjectId.isValid(requester_id)) throw new Error("requester_id kh√¥ng h·ª£p l·ªá");
  if (!mongoose.Types.ObjectId.isValid(user_id)) throw new Error("user_id kh√¥ng h·ª£p l·ªá");
  if (!mongoose.Types.ObjectId.isValid(group_id)) throw new Error("group_id kh√¥ng h·ª£p l·ªá");

  // üß© Ki·ªÉm tra requester c√≥ trong group kh√¥ng
  const requesterMember = await groupMemberRepo.findMember(requester_id, group_id);
  if (!requesterMember) throw new Error("B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa group n√†y");

  const requesterRole = requesterMember.role_in_group?.toLowerCase().trim();
  const isOwner = requesterRole === "ng∆∞·ªùi t·∫°o";
  const isAdmin = requesterRole === "qu·∫£n tr·ªã vi√™n";
  const isSelf = requester_id === user_id;

  // üß© L·∫•y user requester trong h·ªá th·ªëng (ƒë·ªÉ ki·ªÉm tra c√≥ ph·∫£i System_Manager kh√¥ng)
  const systemUser = await UserRole.findOne({ user_id: requester_id }).populate("role_id");
  const isSystemManager = systemUser?.role_id?.name === "System_Manager";

  // üß© Ki·ªÉm tra quy·ªÅn c·∫≠p nh·∫≠t
  if (!isOwner && !isAdmin && !isSystemManager && !isSelf) {
    throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin th√†nh vi√™n n√†y");
  }

  const allowedFields = {};

  // üß© X·ª≠ l√Ω c·∫≠p nh·∫≠t role_in_group
  if (updateData.role_in_group !== undefined) {
    // Ch·ªâ Ng∆∞·ªùi t·∫°o, Qu·∫£n tr·ªã vi√™n ho·∫∑c System_Manager m·ªõi ƒë∆∞·ª£c ƒë·ªïi role
    if (!isOwner && !isAdmin && !isSystemManager) {
      throw new Error("Ch·ªâ Ng∆∞·ªùi t·∫°o, Qu·∫£n tr·ªã vi√™n ho·∫∑c System_Manager m·ªõi c√≥ th·ªÉ thay ƒë·ªïi role");
    }

    const validRoles = ["Ng∆∞·ªùi t·∫°o", "Qu·∫£n tr·ªã vi√™n", "Ng∆∞·ªùi xem"];
    const newRole = updateData.role_in_group.trim();

    if (!validRoles.includes(newRole)) {
      throw new Error("role_in_group kh√¥ng h·ª£p l·ªá");
    }

    // N·∫øu ƒëang h·∫° c·∫•p Ng∆∞·ªùi t·∫°o xu·ªëng role kh√°c, c·∫ßn ki·ªÉm tra group v·∫´n c√≤n √≠t nh·∫•t 1 Ng∆∞·ªùi t·∫°o
    const targetMember = await groupMemberRepo.findMember(user_id, group_id);
    if (!targetMember) throw new Error("Kh√¥ng t√¨m th·∫•y th√†nh vi√™n ƒë·ªÉ c·∫≠p nh·∫≠t");

    const targetCurrentRole = targetMember.role_in_group?.trim();
    if (targetCurrentRole === "Ng∆∞·ªùi t·∫°o" && newRole !== "Ng∆∞·ªùi t·∫°o") {
      const owners = await groupMemberRepo.findMembersByRole(group_id, "Ng∆∞·ªùi t·∫°o");
      if (owners.length <= 1) {
        throw new Error("Kh√¥ng th·ªÉ h·∫° c·∫•p Ng∆∞·ªùi t·∫°o cu·ªëi c√πng c·ªßa group");
      }
    }

    allowedFields.role_in_group = newRole;
  }

  if (Object.keys(allowedFields).length === 0) {
    throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t");
  }

  // üß© C·∫≠p nh·∫≠t th√†nh vi√™n
  const updatedMember = await groupMemberRepo.updateMember(user_id, group_id, allowedFields);
  if (!updatedMember) throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√†nh vi√™n");

  return updatedMember;
}


  async removeMember({ requester_id, user_id, group_id }) {
  const requester = await userRepo.findById(requester_id);
  if (!requester) throw new Error("Ng∆∞·ªùi y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i");

  // ‚úÖ L·∫•y danh s√°ch th√†nh vi√™n hi·ªán t·∫°i
  const members = await groupMemberRepo.findAllByGroup(group_id);
  if (!members || members.length === 0) {
    throw new Error("Nh√≥m kh√¥ng c√≥ th√†nh vi√™n n√†o");
  }

  // ‚ùó N·∫øu nh√≥m ch·ªâ c√≥ 1 ng∆∞·ªùi, kh√¥ng cho ph√©p x√≥a
  if (members.length === 1) {
    throw new Error("Kh√¥ng th·ªÉ x√≥a th√†nh vi√™n cu·ªëi c√πng c·ªßa nh√≥m");
  }

  // ‚úÖ System Manager/Admin ƒë∆∞·ª£c ph√©p x√≥a b·∫•t k·ª≥ ai
  if (!["system_manager", "admin"].includes(requester.role?.toLowerCase())) {
    const requesterMember = await groupMemberRepo.findMember(requester_id, group_id);
    if (!requesterMember) throw new Error("B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa group n√†y");

    const requesterRole = requesterMember.role_in_group.toLowerCase().trim();
    if (requesterRole !== "ng∆∞·ªùi t·∫°o" && requesterRole !== "qu·∫£n tr·ªã vi√™n") {
      throw new Error("Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ x√≥a th√†nh vi√™n");
    }

    // ‚ùå Kh√¥ng cho ng∆∞·ªùi t·∫°o x√≥a ch√≠nh m√¨nh
    if (requester_id === user_id && requesterRole === "ng∆∞·ªùi t·∫°o") {
      throw new Error("Ng∆∞·ªùi t·∫°o group kh√¥ng th·ªÉ x√≥a ch√≠nh m√¨nh");
    }
  }

  // ‚úÖ Th·ª±c hi·ªán x√≥a
  const result = await groupMemberRepo.removeMember(user_id, group_id);
  if (result.deletedCount === 0) {
    throw new Error("Kh√¥ng t√¨m th·∫•y th√†nh vi√™n ƒë·ªÉ x√≥a");
  }

  return true;
}


  async getMembers(group_id) {
    const groupRepo = require('../repositories/group.repository');
    const group = await groupRepo.findById(group_id);
    if (!group) throw new Error("Group kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a");
    return await groupMemberRepo.getMembersByGroup(group_id);
  }

  async selectAll() {
    const groupMembers = await groupMemberRepo.selectAll();
    if (!groupMembers) throw new Error("Kh√¥ng th·ªÉ truy xu·∫•t d·ªØ li·ªáu");
    return groupMembers;
  }

  async getGroupbyUser(id) {
    const groupUser = await groupMemberRepo.getByGroupMembers(id);
    if (!groupUser) throw new Error("Kh√¥ng th·ªÉ truy xu·∫•t d·ªØ li·ªáu");
    return groupUser;
  }

  async addBulkMembers({ requester_id, group_id, members }) {
    const requester = await userRepo.findById(requester_id);
    if (!requester) throw new Error("Ng∆∞·ªùi y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i");

    // ‚úÖ Cho ph√©p System Manager ho·∫∑c Admin
    if (!["system_manager", "admin"].includes(requester.role?.toLowerCase())) {
      const requesterMember = await groupMemberRepo.findMember(requester_id, group_id);

      if (!requesterMember) throw new Error("B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa group n√†y");

      const requesterRole = requesterMember.role_in_group.toLowerCase().trim();
if (!["ng∆∞·ªùi t·∫°o", "qu·∫£n tr·ªã vi√™n", "ng∆∞·ªùi qu·∫£n l√Ω"].includes(requesterRole.toLowerCase())) {
  throw new Error("Ch·ªâ ng∆∞·ªùi t·∫°o, qu·∫£n tr·ªã vi√™n ho·∫∑c ng∆∞·ªùi qu·∫£n l√Ω m·ªõi c√≥ th·ªÉ th√™m th√†nh vi√™n");
}

    }

    if (!Array.isArray(members) || members.length === 0) {
      throw new Error("Danh s√°ch th√†nh vi√™n kh√¥ng h·ª£p l·ªá");
    }
    if (members.length > 50) {
      throw new Error("Kh√¥ng th·ªÉ th√™m qu√° 50 th√†nh vi√™n c√πng l√∫c");
    }

    const group = await groupRepo.findById(group_id);
    if (!group) throw new Error("Group kh√¥ng t·ªìn t·∫°i");

    const results = { success: [], errors: [], total: members.length };

    for (let i = 0; i < members.length; i++) {
      const member = members[i];
      try {
        if (!member.user_id) {
          results.errors.push({ index: i, error: "user_id l√† b·∫Øt bu·ªôc" });
          continue;
        }

        const user = await userRepo.findById(member.user_id);
        if (!user) {
          results.errors.push({ index: i, error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
          continue;
        }

        const existing = await groupMemberRepo.findMember(member.user_id, group_id);
        if (existing) {
          results.errors.push({ index: i, error: "User ƒë√£ l√† th√†nh vi√™n trong group n√†y" });
          continue;
        }

        const role_in_group = member.role_in_group || "Ng∆∞·ªùi xem";
        const newMember = await groupMemberRepo.addMember({ user_id: member.user_id, group_id, role_in_group });

        results.success.push({
          index: i,
          user_id: member.user_id,
          username: user.username,
          email: user.email,
          role_in_group: role_in_group,
          member_id: newMember._id
        });
      } catch (error) {
        results.errors.push({ index: i, error: error.message });
      }
    }

    return results;
  }

  // X√≥a th√†nh vi√™n (Admin h·ªá th·ªëng)
  async adminRemoveMember({ admin_id, user_id, group_id }) {
    const mongoose = require('mongoose');
    
    // Validate input
    if (!mongoose.Types.ObjectId.isValid(admin_id)) {
      throw new Error("admin_id kh√¥ng h·ª£p l·ªá");
    }
    if (!mongoose.Types.ObjectId.isValid(user_id)) {
      throw new Error("user_id kh√¥ng h·ª£p l·ªá");
    }
    if (!mongoose.Types.ObjectId.isValid(group_id)) {
      throw new Error("group_id kh√¥ng h·ª£p l·ªá");
    }

    // Ki·ªÉm tra group t·ªìn t·∫°i
    const group = await groupRepo.findById(group_id);
    if (!group) throw new Error("Group kh√¥ng t·ªìn t·∫°i");

    // Ki·ªÉm tra th√†nh vi√™n t·ªìn t·∫°i
    const member = await groupMemberRepo.findMember(user_id, group_id);
    if (!member) throw new Error("Th√†nh vi√™n kh√¥ng t·ªìn t·∫°i trong group n√†y");

    // Admin c√≥ th·ªÉ x√≥a b·∫•t k·ª≥ th√†nh vi√™n n√†o (k·ªÉ c·∫£ ng∆∞·ªùi t·∫°o)
    const result = await groupMemberRepo.removeMember(user_id, group_id);
    if (result.deletedCount === 0) throw new Error("Kh√¥ng th·ªÉ x√≥a th√†nh vi√™n");
    
    return true;
  }

}

module.exports = new GroupMemberService();
