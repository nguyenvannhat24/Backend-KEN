const PermissionRepository = require('../repositories/permission.repository');

/**
 * Permission Service - X·ª≠ l√Ω business logic cho Permission
 * Ch·ª©a c√°c methods x·ª≠ l√Ω logic nghi·ªáp v·ª• li√™n quan ƒë·∫øn permission
 */
class PermissionService {

  /**
   * L·∫•y t·∫•t c·∫£ permissions
   * @returns {Promise<Array>} Danh s√°ch t·∫•t c·∫£ permissions
   */
  async getAllPermissions() {
    try {
      console.log('üîç Getting all permissions...');
      const permissions = await PermissionRepository.findAll();
      console.log(`‚úÖ Found ${permissions.length} permissions`);
      return permissions;
    } catch (error) {
      console.error('‚ùå Error in getAllPermissions:', error);
      throw error;
    }
  }

  /**
   * L·∫•y permission theo ID
   * @param {string} id - ID c·ªßa permission
   * @returns {Promise<Object>} Permission object
   * @throws {Error} N·∫øu kh√¥ng t√¨m th·∫•y permission
   */
  async getPermissionById(id) {
    try {
      console.log(`üîç Getting permission by ID: ${id}`);
      const permission = await PermissionRepository.findById(id);
      if (!permission) {
        console.log(`‚ùå Permission not found: ${id}`);
        throw new Error('Permission not found');
      }
      console.log(`‚úÖ Found permission: ${permission.code}`);
      return permission;
    } catch (error) {
      console.error('‚ùå Error in getPermissionById:', error);
      throw error;
    }
  }

  /**
   * T·∫°o m·ªõi permission
   * @param {Object} data - D·ªØ li·ªáu permission
   * @returns {Promise<Object>} Permission ƒë√£ t·∫°o
   * @throws {Error} N·∫øu code ƒë√£ t·ªìn t·∫°i
   */
  async createPermission(data) {
    try {
      console.log('üîç Creating new permission...', data);
      
      // Validate required fields
      if (!data.code) {
        throw new Error('Permission code l√† b·∫Øt bu·ªôc');
      }

      // Ki·ªÉm tra tr√πng code
      const existing = await PermissionRepository.findByCode(data.code);
      if (existing) {
        console.log(`‚ùå Permission code already exists: ${data.code}`);
        throw new Error('Permission code already exists');
      }

      const permission = await PermissionRepository.create(data);
      console.log(`‚úÖ Created permission successfully: ${permission.code}`);
      return permission;
    } catch (error) {
      console.error('‚ùå Error in createPermission:', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t permission
   * @param {string} id - ID c·ªßa permission
   * @param {Object} data - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * @returns {Promise<Object>} Permission ƒë√£ c·∫≠p nh·∫≠t
   * @throws {Error} N·∫øu kh√¥ng t√¨m th·∫•y permission
   */
  async updatePermission(id, data) {
    try {
      console.log(`üîç Updating permission: ${id}`, data);
      const updated = await PermissionRepository.update(id, data);
      if (!updated) {
        console.log(`‚ùå Permission not found for update: ${id}`);
        throw new Error('Permission not found');
      }
      console.log(`‚úÖ Updated permission successfully: ${updated.code}`);
      return updated;
    } catch (error) {
      console.error('‚ùå Error in updatePermission:', error);
      throw error;
    }
  }

  /**
   * X√≥a permission
   * @param {string} id - ID c·ªßa permission
   * @returns {Promise<Object>} Permission ƒë√£ x√≥a
   * @throws {Error} N·∫øu kh√¥ng t√¨m th·∫•y permission
   */
  async deletePermission(id) {
    try {
      console.log(`üîç Deleting permission: ${id}`);
      const deleted = await PermissionRepository.delete(id);
      if (!deleted) {
        console.log(`‚ùå Permission not found for deletion: ${id}`);
        throw new Error('Permission not found');
      }
      console.log(`‚úÖ Deleted permission successfully: ${deleted.code}`);
      return deleted;
    } catch (error) {
      console.error('‚ùå Error in deletePermission:', error);
      throw error;
    }
  }
}

module.exports = new PermissionService();
