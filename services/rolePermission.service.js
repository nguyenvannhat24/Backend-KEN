const rolePermissionRepository = require('../repositories/rolePermission.repository');
const roleRepository = require("../repositories/role.repository");
const UserRole = require( '../models/userRole.model.js');
const Role = require( '../models/role.model.js');
const userRoleRepository = require('../repositories/userRole.repository.js');
const mongoose = require('mongoose');
class RolePermissionService {
  async createRolePermission(data) {
    return await rolePermissionRepository.create(data);
  }

  async getAllRolePermissions() {
    return await rolePermissionRepository.findAll();
  }

  async getRolePermissionById(id) {
    return await rolePermissionRepository.findById(id);
  }

  async getPermissionsByRole(roleId) {
    return await rolePermissionRepository.findByRoleId(roleId);
  }

  async updateRolePermission(id, data) {
    return await rolePermissionRepository.update(id, data);
  }

  async deleteRolePermission(id) {
    return await rolePermissionRepository.delete(id);
  }

  async deleteRolePermissionsByRole(roleId) {
    return await rolePermissionRepository.deleteByRoleId(roleId);
  }

  /**
   * ‚úÖ L·∫•y RolePermission theo danh s√°ch ID
   */
  async getByIds(ids) {
    return await rolePermissionRepository.findByIds(ids);
  }

  /**
   * ‚úÖ L·∫•y RolePermission theo danh s√°ch role_id
   */
  async getByRoleIds(roleIds) {
    return await rolePermissionRepository.findByRoleIds(roleIds);
  }
  
  async getPermissionsByNameRole(nameRole) {
    const role = await roleRepository.findByName(nameRole);
    if (!role) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y role c√≥ t√™n "${nameRole}"`);
    }

    // T√¨m t·∫•t c·∫£ quy·ªÅn g·∫Øn v·ªõi role n√†y
    const rolePermissions = await rolePermissionRepository.findByRoleIds([role._id]);

    // Tr·∫£ v·ªÅ danh s√°ch permission (ƒë√£ populate)
    return rolePermissions.map(rp => rp.permission_id);
  }


async updateByRoleId(roleId, permissionIds) {
  // 0Ô∏è‚É£ Ki·ªÉm tra role c√≥ ph·∫£i role h·ªá th·ªëng kh√¥ng
  const role = await roleRepository.findById(roleId);
  if (!role) {
    return { success: false, message: "Role kh√¥ng t·ªìn t·∫°i" };
  }
  
 if ((role.name || "").trim().toLowerCase() === "system_manager".toLowerCase()) {
  console.log("‚ö†Ô∏è NgƒÉn kh√¥ng s·ª≠a role System_Manager");
  return { success: false, message: "Kh√¥ng th·ªÉ s·ª≠a quy·ªÅn c·ªßa role h·ªá th·ªëng" };
}


  // 1Ô∏è‚É£ X√≥a t·∫•t c·∫£ quy·ªÅn c≈© c·ªßa role
  await rolePermissionRepository.deleteByRoleId(roleId);

  // 2Ô∏è‚É£ Th√™m l·∫°i quy·ªÅn m·ªõi (n·∫øu c√≥)
  const newRolePermissions = permissionIds.map(pid => ({
    role_id: roleId,
    permission_id: pid
  }));

  if (newRolePermissions.length > 0) {
    await rolePermissionRepository.insertMany(newRolePermissions);
  }

  return { success: true, message: "C·∫≠p nh·∫≠t quy·ªÅn cho role th√†nh c√¥ng" };
}

 async countUsersByRole(roleId) {
    try {
      const role = await Role.findById(roleId);
      if (!role) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y role c√≥ id: ${roleId}`);
        return 0;
      }

      const count = await UserRole.countDocuments({ role_id: role._id, status: 'active' });
      console.log(`üìä Role '${role.name}' ƒëang ƒë∆∞·ª£c d√πng b·ªüi ${count} user.`);
      return count;
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë·∫øm user theo role:", error);
      return 0;
    }
  }
async updateRolePermissions(userId, permissionIds) {
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    console.log("üîπ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t role v√† permission cho user:", userId);

    // 1Ô∏è‚É£ L·∫•y t·∫•t c·∫£ role c·ªßa user
      const userRoles = await userRoleRepository.findRolesByUser(userId);
      console.log("üîπ Role hi·ªán t·∫°i c·ªßa user:", userRoles);

    let roleId;

    if (userRoles.length > 0) {
      const currentRole = userRoles[0].role_id;
      const count = await this.countUsersByRole(currentRole._id);

      console.log(`üìä S·ªë user ƒëang d√πng role '${currentRole.name}':`, count);

      if (count > 1) {
        // üß± N·∫øu c√≥ nhi·ªÅu user ƒëang d√πng role n√†y ‚Üí t·∫°o role ri√™ng
        const existingPrivateRole = await Role.findOne({ name: `role_for_${userId}` });
        if (existingPrivateRole) {
          console.log("‚ö†Ô∏è Role ri√™ng ƒë√£ t·ªìn t·∫°i:", existingPrivateRole._id);
          roleId = existingPrivateRole._id;
        } else {
          const newRole = await Role.create([{ name: `role_for_${userId}` }], { session });
          roleId = newRole[0]._id;
          console.log("üÜï T·∫°o role ri√™ng:", roleId);

          // G√°n role m·ªõi cho user
          await UserRole.create([{ user_id: userId, role_id: roleId }], { session });
          console.log("üë§ G√°n role m·ªõi cho user:", userId);
        }
      } else {
        // ‚úÖ N·∫øu ch·ªâ m√¨nh user n√†y c√≥ role ƒë√≥ ‚Üí d√πng lu√¥n role c≈©
        roleId = currentRole._id;
        console.log("‚úÖ D√πng role hi·ªán t·∫°i:", roleId);
      }
    } else {
      // üß© N·∫øu user ch∆∞a c√≥ role n√†o ‚Üí t·∫°o m·ªõi ho√†n to√†n
      const newRole = await Role.create([{ name: `role_for_${userId}` }], { session });
      roleId = newRole[0]._id;
      console.log("üÜï User ch∆∞a c√≥ role, t·∫°o m·ªõi:", roleId);

      await UserRole.create([{ user_id: userId, role_id: roleId }], { session });
    }

    // 2Ô∏è‚É£ X√≥a permission c≈© c·ªßa role n√†y
    await rolePermissionRepository.deleteByRoleId(roleId, { session });
    console.log("üßπ ƒê√£ x√≥a permission c≈© c·ªßa role:", roleId);

    // 3Ô∏è‚É£ Th√™m permission m·ªõi
    if (permissionIds?.length > 0) {
      const newPermissions = permissionIds.map(pid => ({
        role_id: roleId,
        permission_id: pid
      }));

      const inserted = await rolePermissionRepository.insertMany(newPermissions, { session });
      console.log("‚úÖ Permission m·ªõi ƒë√£ th√™m:", inserted.map(p => p._id.toString()));
    }

    await session.commitTransaction();
    session.endSession();

    console.log("üéØ C·∫≠p nh·∫≠t role v√† permission th√†nh c√¥ng cho user:", userId);
    return { success: true, roleId };
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t role/permission:", err);
    throw err;
  }
}

}

module.exports = new RolePermissionService();
