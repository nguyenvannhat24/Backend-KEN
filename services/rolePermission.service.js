const RolePermissionRepository = require('../repositories/rolePermission.repository');

/**
 * RolePermission Service - X·ª≠ l√Ω business logic cho RolePermission
 * Ch·ª©a c√°c methods x·ª≠ l√Ω logic nghi·ªáp v·ª• li√™n quan ƒë·∫øn role-permission
 */
class RolePermissionService {

  /**
   * L·∫•y t·∫•t c·∫£ role-permissions
   * @returns {Promise<Array>} Danh s√°ch t·∫•t c·∫£ role-permissions
   */
  async getAllRolePermissions() {
    try {
      console.log('üîç Getting all role-permissions...');
      const rolePermissions = await RolePermissionRepository.getAll();
      console.log(`‚úÖ Found ${rolePermissions.length} role-permissions`);
      return rolePermissions;
    } catch (error) {
      console.error('‚ùå Error in getAllRolePermissions:', error);
      throw error;
    }
  }

  /**
   * T·∫°o m·ªõi role-permission
   * @param {Object} data - D·ªØ li·ªáu role-permission
   * @returns {Promise<Object>} Role-permission ƒë√£ t·∫°o
   */
  async createRolePermission(data) {
    try {
      console.log('üîç Creating new role-permission...', data);
      
      // Validate required fields
      if (!data.role_id || !data.permission_id) {
        throw new Error('role_id v√† permission_id l√† b·∫Øt bu·ªôc');
      }

      const rolePermission = await RolePermissionRepository.create(data);
      console.log('‚úÖ Created role-permission successfully:', rolePermission._id);
      return rolePermission;
    } catch (error) {
      console.error('‚ùå Error in createRolePermission:', error);
      throw error;
    }
  }

  /**
   * L·∫•y role-permission theo ID
   * @param {string} id - ID c·ªßa role-permission
   * @returns {Promise<Object|null>} Role-permission object ho·∫∑c null
   */
  async getRolePermissionById(id) {
    try {
      console.log(`üîç Getting role-permission by ID: ${id}`);
      const rolePermission = await RolePermissionRepository.getById(id);
      if (rolePermission) {
        console.log(`‚úÖ Found role-permission: ${id}`);
      } else {
        console.log(`‚ùå Role-permission not found: ${id}`);
      }
      return rolePermission;
    } catch (error) {
      console.error('‚ùå Error in getRolePermissionById:', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t role-permission
   * @param {string} id - ID c·ªßa role-permission
   * @param {Object} data - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * @returns {Promise<Object|null>} Role-permission ƒë√£ c·∫≠p nh·∫≠t ho·∫∑c null
   */
  async updateRolePermission(id, data) {
    try {
      console.log(`üîç Updating role-permission: ${id}`, data);
      const updated = await RolePermissionRepository.update(id, data);
      if (updated) {
        console.log('‚úÖ Updated role-permission successfully');
      } else {
        console.log('‚ùå Role-permission not found for update');
      }
      return updated;
    } catch (error) {
      console.error('‚ùå Error in updateRolePermission:', error);
      throw error;
    }
  }

  /**
   * X√≥a role-permission
   * @param {string} id - ID c·ªßa role-permission
   * @returns {Promise<Object|null>} Role-permission ƒë√£ x√≥a ho·∫∑c null
   */
  async deleteRolePermission(id) {
    try {
      console.log(`üîç Deleting role-permission: ${id}`);
      const deleted = await RolePermissionRepository.delete(id);
      if (deleted) {
        console.log('‚úÖ Deleted role-permission successfully');
      } else {
        console.log('‚ùå Role-permission not found for deletion');
      }
      return deleted;
    } catch (error) {
      console.error('‚ùå Error in deleteRolePermission:', error);
      throw error;
    }
  }
}

module.exports = new RolePermissionService();
