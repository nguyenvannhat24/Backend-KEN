const userRoleRepo = require('../repositories/userRole.repository');
const roleRepository = require('../repositories/role.repository');

/**
 * UserRole Service - X·ª≠ l√Ω business logic cho UserRole
 * Ch·ª©a c√°c methods x·ª≠ l√Ω logic nghi·ªáp v·ª• li√™n quan ƒë·∫øn user-role
 */
class UserRoleService {

  /** L·∫•y t·∫•t c·∫£ user-role */
  async viewAll() {
    try {
      console.log('üîç Getting all user-roles...');
      const userRoles = await userRoleRepo.findAll();
      console.log(`‚úÖ Found ${userRoles.length} user-roles`);
      return userRoles;
    } catch (error) {
      console.error('‚ùå Error in viewAll userRoles:', error);
      throw error;
    }
  }

  /** L·∫•y 1 role c·ªßa user (n·∫øu m·ªói user ch·ªâ c√≥ 1 role) */
  async getRole(userId) {
    try {
      console.log(`üîç Getting role for user: ${userId}`);
      const role = await userRoleRepo.findRoleByUser(userId);
      if (role) {
        console.log(`‚úÖ Found role for user: ${userId}`);
      } else {
        console.log(`‚ùå No role found for user: ${userId}`);
      }
      return role;
    } catch (error) {
      console.error('‚ùå Error in getRole:', error);
      throw error;
    }
  }

  /** L·∫•y t·∫•t c·∫£ role c·ªßa user (n·∫øu 1 user c√≥ nhi·ªÅu role) */
  async getRoles(userId) {
    try {
      console.log(`üîç Getting all roles for user: ${userId}`);
      const roles = await userRoleRepo.findRolesByUser(userId);
      console.log(`‚úÖ Found ${roles.length} roles for user: ${userId}`);
      return roles;
    } catch (error) {
      console.error('‚ùå Error in getRoles:', error);
      throw error;
    }
  }

  /** Th√™m m·ªõi user-role */
async create(userRoleData) {
  try {
    if (!userRoleData.user_id) throw new Error('‚ùå user_id b·ªã thi·∫øu');
    if (!userRoleData.role_id) throw new Error('‚ùå role_id b·ªã thi·∫øu');

    const role = await roleRepository.findById(userRoleData.role_id);
    if (role?.name === "System_Manager") {
      throw new Error("‚ùå Kh√¥ng th·ªÉ g√°n role System_Manager cho user kh√°c");
    }
    console.log(role);

    // ‚úÖ Ki·ªÉm tra tr√πng tr∆∞·ªõc khi t·∫°o
    const exists = await userRoleRepo.findByUserAndRole(userRoleData.user_id, userRoleData.role_id);
    if (exists) {
      console.log(`‚ö†Ô∏è User-role ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o m·ªõi: user_id=${userRoleData.user_id}, role_id=${userRoleData.role_id}`);
      return exists;
    }

    const newUserRole = await userRoleRepo.create(userRoleData);
    console.log('‚úÖ Created user-role successfully:', newUserRole._id);
    return newUserRole;
  } catch (error) {
    console.error('‚ùå Error in create userRole:', error.message);
    throw error;
  }
}

  /** C·∫≠p nh·∫≠t role c·ªßa user-role record */
  async update(userRoleId, updateData) {
    try {
      const userRole = await userRoleRepo.findById(userRoleId);
      if (!userRole) throw new Error("User-role kh√¥ng t·ªìn t·∫°i");

      // Check role c≈©
    const role = await roleRepository.findById(userRole.role_id);
    if (role?.name === "System_Manager") {
      throw new Error("‚ùå Kh√¥ng th·ªÉ g√°n role System_Manager cho user kh√°c");
    }

      // Check role m·ªõi
      if (updateData.role_id) {
        const newRole = await roleRepository.findById(updateData.role_id);
        if (newRole?.name === "System_Manager") {
          throw new Error("‚ùå Kh√¥ng th·ªÉ g√°n System_Manager khi update");
        }
      }

      const updatedUserRole = await userRoleRepo.update(userRoleId, updateData);
      console.log('‚úÖ Updated user-role successfully');
      return updatedUserRole;
    } catch (error) {
      console.error('‚ùå Error in update userRole:', error.message);
      throw error;
    }
  }

  /** X√≥a 1 user-role theo id */
  async delete(userRoleId) {
    try {
      const userRole = await userRoleRepo.findById(userRoleId);
      if (!userRole) throw new Error("User-role kh√¥ng t·ªìn t·∫°i");
    const role = await roleRepository.findById(userRole.role_id);
    if (role?.name === "System_Manager") {
      throw new Error("‚ùå Kh√¥ng th·ªÉ g√°n role System_Manager cho user kh√°c");
    }
      const deleted = await userRoleRepo.delete(userRoleId);
      console.log('‚úÖ Deleted user-role successfully');
      return deleted;
    } catch (error) {
      console.error('‚ùå Error in delete userRole:', error.message);
      throw error;
    }
  }

  /** X√≥a t·∫•t c·∫£ role c·ªßa 1 user */
  async deleteByUser(userId) {
    try {
      console.log(`üîç Deleting all roles for user: ${userId}`);

      // L·∫•y danh s√°ch roles hi·ªán c√≥ c·ªßa user
      const userRoles = await userRoleRepo.findByUser(userId);

      // L·∫•y th√™m t√™n role ƒë·ªÉ check System_Manager
      const rolesWithName = await Promise.all(
        userRoles.map(async ur => {
          const role = await roleRepository.findById(ur.role_id);
          return { ...ur, name: role?.name };
        })
      );

      const protectedRoles = ["System_Manager"];
      const rolesToDelete = rolesWithName.filter(r => !protectedRoles.includes(r.name));

      if (rolesToDelete.length === 0) {
        console.log(`‚ö†Ô∏è No deletable roles for user: ${userId}`);
        return { deletedCount: 0 };
      }

      const result = await userRoleRepo.deleteManyByIds(rolesToDelete.map(r => r._id));
      console.log(`‚úÖ Deleted ${result.deletedCount} roles for user: ${userId}`);

      return result;
    } catch (error) {
      console.error('‚ùå Error in deleteByUser:', error.message);
      throw error;
    }
  }

  /** T√¨m 1 user-role theo user_id v√† role_id */
  async findByUserAndRole(user_id, role_id) {
    if (!user_id) throw new Error('‚ùå user_id b·ªã thi·∫øu');
    if (!role_id) throw new Error('‚ùå role_id b·ªã thi·∫øu');

    return await userRoleRepo.findByUserAndRole(user_id, role_id);
  }

  /** L·∫•y danh s√°ch user theo role name */
  async findIdRoleByName(nameRole) {
    const role = await roleRepository.findByName(nameRole);
    if (!role) throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y role');

    const idRole = role.data.data._id;
    if (!idRole) throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y id role');

    const users = await userRoleRepo.findUserByIdRole(idRole);
    return users.data;
  }
}

module.exports = new UserRoleService();
