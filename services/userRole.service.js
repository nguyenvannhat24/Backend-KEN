const userRoleRepo = require('../repositories/userRole.repository');

/**
 * UserRole Service - X·ª≠ l√Ω business logic cho UserRole
 * Ch·ª©a c√°c methods x·ª≠ l√Ω logic nghi·ªáp v·ª• li√™n quan ƒë·∫øn user-role
 */
class UserRoleService {

  /**
   * L·∫•y t·∫•t c·∫£ user-role
   * @returns {Promise<Array>} Danh s√°ch t·∫•t c·∫£ user-role
   */
  async viewAll() {
    try {
      console.log('üîç Getting all user-roles...');
      const userRoles = await userRoleRepo.findAll();
      console.log(`‚úÖ Found ${userRoles.length} user-roles`);
      return userRoles;
    } catch (error) {
      console.error('‚ùå Error in viewAll userRoles:', error);
      throw error;
    }
  }

  /**
   * L·∫•y 1 role c·ªßa user (n·∫øu m·ªói user ch·ªâ c√≥ 1 role)
   * @param {string} userId - ID c·ªßa user
   * @returns {Promise<Object|null>} Role c·ªßa user ho·∫∑c null
   */
  async getRole(userId) {
    try {
      console.log(`üîç Getting role for user: ${userId}`);
      const role = await userRoleRepo.findRoleByUser(userId);
      if (role) {
        console.log(`‚úÖ Found role for user: ${userId}`);
      } else {
        console.log(`‚ùå No role found for user: ${userId}`);
      }
      return role;
    } catch (error) {
      console.error('‚ùå Error in getRole:', error);
      throw error;
    }
  }

  /**
   * L·∫•y t·∫•t c·∫£ role c·ªßa user (n·∫øu 1 user c√≥ nhi·ªÅu role)
   * @param {string} userId - ID c·ªßa user
   * @returns {Promise<Array>} Danh s√°ch roles c·ªßa user
   */
  async getRoles(userId) {
    try {
      console.log(`üîç Getting all roles for user: ${userId}`);
      const roles = await userRoleRepo.findRolesByUser(userId);
      console.log(`‚úÖ Found ${roles.length} roles for user: ${userId}`);
      return roles;
    } catch (error) {
      console.error('‚ùå Error in getRoles:', error);
      throw error;
    }
  }

  /**
   * Th√™m m·ªõi user-role
   * @param {Object} userRoleData - D·ªØ li·ªáu user-role
   * @returns {Promise<Object>} User-role ƒë√£ t·∫°o
   */
async create(userRoleData) {
  try {
    console.log('üîç Creating new user-role...', userRoleData);
    
    // Ki·ªÉm tra t·ª´ng field v√† n√©m l·ªói r√µ r√†ng
    if (!userRoleData.user_id) {
      throw new Error('‚ùå user_id b·ªã thi·∫øu');
    }
    if (!userRoleData.role_id) {
      throw new Error('‚ùå role_id b·ªã thi·∫øu');
    
    }

    const newUserRole = await userRoleRepo.create(userRoleData);
    console.log('‚úÖ Created user-role successfully:', newUserRole._id);
    return newUserRole;
  } catch (error) {
    console.error('‚ùå Error in create userRole:', error.message);
    throw error;
  }
}


  /**
   * C·∫≠p nh·∫≠t role c·ªßa user-role record
   * @param {string} userRoleId - ID c·ªßa user-role
   * @param {Object} updateData - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * @returns {Promise<Object|null>} User-role ƒë√£ c·∫≠p nh·∫≠t ho·∫∑c null
   */
  async update(userRoleId, updateData) {
    try {
      console.log(`üîç Updating user-role: ${userRoleId}`, updateData);
      const updatedUserRole = await userRoleRepo.update(userRoleId, updateData);
      if (updatedUserRole) {
        console.log('‚úÖ Updated user-role successfully');
      } else {
        console.log('‚ùå User-role not found for update');
      }
      return updatedUserRole;
    } catch (error) {
      console.error('‚ùå Error in update userRole:', error);
      throw error;
    }
  }

  /**
   * X√≥a 1 user-role theo id
   * @param {string} userRoleId - ID c·ªßa user-role
   * @returns {Promise<Object|null>} User-role ƒë√£ x√≥a ho·∫∑c null
   */
  async delete(userRoleId) {
    try {
      console.log(`üîç Deleting user-role: ${userRoleId}`);
      const deleted = await userRoleRepo.delete(userRoleId);
      if (deleted) {
        console.log('‚úÖ Deleted user-role successfully');
      } else {
        console.log('‚ùå User-role not found for deletion');
      }
      return deleted;
    } catch (error) {
      console.error('‚ùå Error in delete userRole:', error);
      throw error;
    }
  }

  /**
   * X√≥a t·∫•t c·∫£ role c·ªßa 1 user
   * @param {string} userId - ID c·ªßa user
   * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
   */
  async deleteByUser(userId) {
    try {
      console.log(`üîç Deleting all roles for user: ${userId}`);
      const result = await userRoleRepo.deleteByUser(userId);
      console.log(`‚úÖ Deleted ${result.deletedCount} roles for user: ${userId}`);
      return result;
    } catch (error) {
      console.error('‚ùå Error in deleteByUser:', error);
      throw error;
    }
  }
  async findByUserAndRole(user_id, role_id) {
    if (!user_id) throw new Error('‚ùå user_id b·ªã thi·∫øu');
    if (!role_id) throw new Error('‚ùå role_id b·ªã thi·∫øu');

    return await userRoleRepo.findByUserAndRole(user_id, role_id);
  }
}

module.exports = new UserRoleService();
